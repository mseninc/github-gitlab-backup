Resources:
  MyBatchWorkerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/states/${self:service}-batch
      RetentionInDays: 60

  MyECSWorkerTaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /aws/states/${self:service}-task
      RetentionInDays: 60

  # StepFunctions 用の IAM ロール
  MyStateMachineIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/${self:service}/"
      RoleName: ${self:service}-stateMachine-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: ${self:service}-stateMachine-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # 補足: "The state machine IAM Role is not authorized to access the Log Destination"
              # が表示されるときは cloudwatch-logs-resource-policy.md を参照
              - Effect: Allow # CloudWatch Logs
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroup
                Resource: "*"
              - Effect: Allow # Lambda
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}*
              - Effect: "Allow" # StepFunctions
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:service}*"
              - Effect: Allow # StepFunctions
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
              - Effect: Allow # ECS Task 実行
                Action:
                  - ecs:RunTask
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${self:service}*
              - Effect: Allow # ECS Task 実行用 PassRole
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt MyECSTaskExecutionRole.Arn
                  - !GetAtt MyTaskRole.Arn

  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ${self:service}-ecs-cluster

  MyECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !ImportValue ${self:custom.infraStack}-VpcId
      Tags:
        - Key: Name
          Value: ${self:service}-ecs-sg

  MyECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: ${self:service}-task
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: 512
      Memory: 1024
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !GetAtt MyECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MyTaskRole.Arn
      Volumes:
        - Name: efs
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: !ImportValue ${self:custom.infraStack}-EFSAccessPointId
              IAM: "ENABLED"
            FilesystemId: !ImportValue ${self:custom.infraStack}-EFSFileSystemId
            TransitEncryption: "ENABLED"
      ContainerDefinitions:
        - Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${self:custom.workerImageName}:worker
          Name: worker
          Cpu: 512
          MemoryReservation: 1024
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref MyECSWorkerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
              # awslogs-create-group: true
          Essential: true
          LinuxParameters:
            # https://aws.amazon.com/jp/blogs/news/graceful-shutdowns-with-ecs/
            # https://y-ohgi.blog/entry/2021/03/16/ECS_Fargate_%E3%81%A7shell_%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B
            InitProcessEnabled: true
          MountPoints:
            - ContainerPath: /mnt/efs
              SourceVolume: efs

  MyECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}-ECSTaskExecutionRolePolicy
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        # ResourceInitializationError: unable to pull secrets or registry auth: execution resource retrieval failed: unable to retrieve ecr registry auth: service call has been retried 3 time(s)
        # https://note.com/shift_tech/n/nf456dd5900df
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      # Policies:
      #   - PolicyName: ${self:service}-ECSTaskExecutionRolePolicy
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - logs:CreateLogGroup
      #           Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${self:service}-*:*

  MyTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ${self:service}-TaskRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSOpsWorksCloudWatchLogs"

  ##############################################################
  # VPC エンドポイント
  ##############################################################

  # MyVpcEndpointLogEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PrivateDnsEnabled: false
  #     SecurityGroupIds:
  #       - !Ref MyECSSecurityGroup
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
  #     SubnetIds:
  #       - !ImportValue ${self:custom.infraStack}-PublicSubnet1Id
  #     VpcEndpointType: Interface
  #     VpcId: !ImportValue ${self:custom.infraStack}-VpcId

  # MyVpcEndpointEcrDkr:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PrivateDnsEnabled: false
  #     SecurityGroupIds:
  #       - !Ref MyECSSecurityGroup
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
  #     SubnetIds:
  #       - !ImportValue ${self:custom.infraStack}-PublicSubnet1Id
  #     VpcEndpointType: Interface
  #     VpcId: !ImportValue ${self:custom.infraStack}-VpcId

  # MyVpcEndpointEcrApi:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PrivateDnsEnabled: false
  #     SecurityGroupIds:
  #       - !Ref MyECSSecurityGroup
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
  #     SubnetIds:
  #       - !ImportValue ${self:custom.infraStack}-PublicSubnet1Id
  #     VpcEndpointType: Interface
  #     VpcId: !ImportValue ${self:custom.infraStack}-VpcId

  # MyVpcEndpointSM:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PrivateDnsEnabled: false
  #     SecurityGroupIds:
  #       - !Ref MyECSSecurityGroup
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
  #     SubnetIds:
  #       - !ImportValue ${self:custom.infraStack}-PublicSubnet1Id
  #     VpcEndpointType: Interface
  #     VpcId: !ImportValue ${self:custom.infraStack}-VpcId

  # MyVpcEndpointS3:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
  #     RouteTableIds:
  #       - !ImportValue ${self:custom.infraStack}-PublicRouteTableId
  #     VpcEndpointType: Gateway
  #     VpcId: !ImportValue ${self:custom.infraStack}-VpcId
