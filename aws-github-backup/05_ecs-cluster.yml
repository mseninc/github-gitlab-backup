service: github-backup-ecs-cluster
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  logRetentionInDays: 30
  stage: dev
  region: ap-northeast-1

  stackTags:
    SERVICE: ${self:service}
    APP: ${self:service}
    STAGE: ${sls:stage}

custom:
  baseStackName: github-backup
  workerImage: serverless-${self:custom.baseStackName}-ecr-images-${sls:stage}:repo-sync

resources:
  Resources:
    MyECSWorkerTaskLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: /aws/states/${self:service}-task-repo-sync
        RetentionInDays: 60

    MyECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ${self:service}

    MyECSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: ECS Security Group
        VpcId: !ImportValue ${self:custom.baseStackName}-VpcId
        Tags:
          - Key: Name
            Value: ${self:service}-ecs-sg

    MyECSTaskDefinition:
      Type: "AWS::ECS::TaskDefinition"
      Properties:
        Family: ${self:service}-repo-sync
        RequiresCompatibilities:
          - "FARGATE"
        Cpu: 512
        Memory: 1024
        NetworkMode: "awsvpc"
        ExecutionRoleArn: !GetAtt MyECSTaskExecutionRole.Arn
        TaskRoleArn: !GetAtt MyTaskRole.Arn
        Volumes:
          - Name: efs
            EFSVolumeConfiguration:
              AuthorizationConfig:
                AccessPointId: !ImportValue ${self:custom.baseStackName}-EFSAccessPointId
                IAM: "ENABLED"
              FilesystemId: !ImportValue ${self:custom.baseStackName}-EFSFileSystemId
              TransitEncryption: "ENABLED"
        ContainerDefinitions:
          - Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${self:custom.workerImage}
            Name: worker
            Cpu: 512
            MemoryReservation: 1024
            LogConfiguration:
              LogDriver: "awslogs"
              Options:
                awslogs-group: !Ref MyECSWorkerTaskLogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: "ecs"
                # awslogs-create-group: true
            Essential: true
            LinuxParameters:
              # https://aws.amazon.com/jp/blogs/news/graceful-shutdowns-with-ecs/
              # https://y-ohgi.blog/entry/2021/03/16/ECS_Fargate_%E3%81%A7shell_%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B
              InitProcessEnabled: true
            MountPoints:
              - ContainerPath: /mnt/efs
                SourceVolume: efs

    MyECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-ECSTaskExecutionRolePolicy
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          # ResourceInitializationError: unable to pull secrets or registry auth: execution resource retrieval failed: unable to retrieve ecr registry auth: service call has been retried 3 time(s)
          # https://note.com/shift_tech/n/nf456dd5900df
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        Policies:
          - PolicyName: ${self:service}-ECSTaskExecutionRolePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "states:StartExecution"
                  Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:service}*

    MyTaskRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:service}-TaskRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "ecs-tasks.amazonaws.com"
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSOpsWorksCloudWatchLogs"
        Policies:
          - PolicyName: ${self:service}-ECSTaskRolePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - states:SendTaskSuccess
                    - states:SendTaskFailure
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource: "*"

  Outputs:
    ECSCluster:
      Value: !Ref MyECSCluster
      Export:
        Name: ${self:custom.baseStackName}-ECSCluster

    ECSRepoSyncTaskDefinition:
      Value: !Ref MyECSTaskDefinition
      Export:
        Name: ${self:custom.baseStackName}-ECSRepoSyncTaskDefinition

    ECSTaskSecurityGroup:
      Value: !Ref MyECSSecurityGroup
      Export:
        Name: ${self:custom.baseStackName}-ECSTaskSecurityGroup

    ECSTaskExecutionRole:
      Value: !GetAtt MyECSTaskExecutionRole.Arn
      Export:
        Name: ${self:custom.baseStackName}-ECSTaskExecutionRole

    ECSTaskRole:
      Value: !GetAtt MyTaskRole.Arn
      Export:
        Name: ${self:custom.baseStackName}-ECSTaskRole
